// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tracker.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct tracker: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var speed: Int32 = 0

  var battery: Int32 = 0

  var coordinates: String = String()

  var power: Bool = false

  var id: String = String()

  var timeTrack: String = String()

  var name: String = String()

  var longitude: String = String()

  var latitude: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct tracker_list: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackers: [tracker] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension tracker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "tracker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "speed"),
    2: .same(proto: "battery"),
    3: .same(proto: "coordinates"),
    5: .same(proto: "power"),
    6: .same(proto: "id"),
    7: .standard(proto: "time_track"),
    8: .same(proto: "name"),
    9: .same(proto: "longitude"),
    10: .same(proto: "latitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.speed) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.battery) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.coordinates) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.power) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.timeTrack) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.longitude) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.latitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.speed != 0 {
      try visitor.visitSingularInt32Field(value: self.speed, fieldNumber: 1)
    }
    if self.battery != 0 {
      try visitor.visitSingularInt32Field(value: self.battery, fieldNumber: 2)
    }
    if !self.coordinates.isEmpty {
      try visitor.visitSingularStringField(value: self.coordinates, fieldNumber: 3)
    }
    if self.power != false {
      try visitor.visitSingularBoolField(value: self.power, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 6)
    }
    if !self.timeTrack.isEmpty {
      try visitor.visitSingularStringField(value: self.timeTrack, fieldNumber: 7)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 8)
    }
    if !self.longitude.isEmpty {
      try visitor.visitSingularStringField(value: self.longitude, fieldNumber: 9)
    }
    if !self.latitude.isEmpty {
      try visitor.visitSingularStringField(value: self.latitude, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: tracker, rhs: tracker) -> Bool {
    if lhs.speed != rhs.speed {return false}
    if lhs.battery != rhs.battery {return false}
    if lhs.coordinates != rhs.coordinates {return false}
    if lhs.power != rhs.power {return false}
    if lhs.id != rhs.id {return false}
    if lhs.timeTrack != rhs.timeTrack {return false}
    if lhs.name != rhs.name {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension tracker_list: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "tracker_list"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trackers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.trackers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trackers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: tracker_list, rhs: tracker_list) -> Bool {
    if lhs.trackers != rhs.trackers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
